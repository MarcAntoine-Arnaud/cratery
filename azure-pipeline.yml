trigger:
  branches:
    include:
    - 'master'
  tags:
    include:
    - 'v*'

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    container:
      image: rg.fr-par.scw.cloud/cenotelie/build-env:latest
      endpoint: scaleway
    steps:
    - script: |
        bash /home/builder/cargo-auth.sh $(cargoLogin) $(cargoToken)
        bash ./build-src.sh --target=production
    - task: CopyFiles@2
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/target/release'
        contents: 'cratery'
        targetFolder: '$(Build.ArtifactStagingDirectory)/bin'
        overWrite: true
    - task: PublishPipelineArtifact@1
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      inputs:
        path: '$(Build.ArtifactStagingDirectory)'
        artifact: drop

- stage: PackageDeploy
  displayName: Package and deploy
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
  jobs:
  - job: PackageDeploy
    displayName: Package and deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: drop
        path: $(Build.ArtifactStagingDirectory)
    - script: |
        mkdir -p $(Build.SourcesDirectory)/target/release
        chmod +x $(Build.ArtifactStagingDirectory)/bin/cratery
        mv $(Build.ArtifactStagingDirectory)/bin/* $(Build.SourcesDirectory)/target/release
        docker login -u $(dockerLogin) -p $(dockerPassword) rg.fr-par.scw.cloud
    - task: ShellScript@2
      displayName: Build docker images
      inputs:
        scriptPath: build-docker.sh
        args: --target=production
    - task: ShellScript@2
      displayName: Publish docker images
      inputs:
        scriptPath: build-publish.sh
        args: --target=production
    - task: ShellScript@2
      displayName: Deploy
      inputs:
        scriptPath: build-deploy.sh
        args: --target=production --deployCredentials=$(deployCredentials)
